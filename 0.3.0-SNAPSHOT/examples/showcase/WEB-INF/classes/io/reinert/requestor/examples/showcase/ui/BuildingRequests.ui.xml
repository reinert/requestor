<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<!--
~ Copyright 2014-2021 Danilo Reinert
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~     http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
             xmlns:g='urn:import:com.google.gwt.user.client.ui'>
  <g:HTMLPanel>
    <!-- START SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="start-building">Set up a request</h1>
      <p class="lead">
        Start building a request by calling <code>session.req(&lt;uri&gt;)</code>.
      </p>
      <div class="highlight">
        <pre ui:field="req" class="java">
          <code>Session session = new GwtSession();
            <br/>RequestInvoker req = session.req(&quot;/target-uri&quot;);
          </code>
        </pre>
      </div>

      <p style="margin-bottom: 0">
        Note: a <code>RequestInvoker</code> inherits from <code>RequestBuilder</code> but has additional invoking capabilities.
      </p>
    </g:HTMLPanel>

    <!-- HEADERS SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="headers">Headers</h1>
      <p class="lead">
        There are a few different ways of setting the request headers.
      </p>

      <div class="requestor-showcase-innersection">
        <h3><code>header(String, String)</code></h3>
        <p>
          This method allows you to add a headers to the request by simply specifying it's name and value.
        </p>
        <div class="highlight">
          <pre ui:field="header1" class="java">
            <code>
              req.header("Content-Type", "application/json; charset=utf-8");
            </code>
          </pre>
        </div>
      </div>

      <div class="requestor-showcase-innersection">
        <h3><code>header(Header)</code></h3>
        <p>
          Alternatively, you can add a <code>Header</code> to the request.
          The Header type has several subclasses representing different kind of headers.
          Some of them are: <code>SimpleHeader</code>, <code>MultivaluedHeader</code>, <code>QualityFactorHeader</code>,
          <code>ContentTypeHeader</code>, <code>AcceptHeader</code> and <code>LinkHeader</code>,.
        </p>
        <div class="highlight">
          <pre ui:field="header2" class="java">
            <code>
              req.header(new ContentTypeHeader("application/json", Param.of("charset", "utf-8")));
            </code>
          </pre>
        </div>
      </div>

      <div class="requestor-showcase-innersection">
        <h3><code>contentType(String)</code></h3>
        <p>
          This is a shortcut for setting the Content-Type header.
        </p>
        <div class="highlight">
          <pre ui:field="header3" class="java">
            <code>
              req.contentType("application/json; charset=utf-8");
            </code>
          </pre>
        </div>
      </div>

      <div class="requestor-showcase-innersection">
        <h3><code>accept(String)</code></h3>
        <p>
          This is a shortcut for setting the Accept header.
        </p>
        <div class="highlight">
          <pre ui:field="header4" class="java">
            <code>
              req.accept("application/json, text/plain; q=0.8");
            </code>
          </pre>
        </div>
      </div>
    </g:HTMLPanel>

    <!-- TIMEOUT SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="timeout">Timeout</h1>
      <p class="lead">
        Set the timeout (in milliseconds) of the request.
      </p>
      <h3><code>timeout(int)</code></h3>
      <div class="highlight">
        <pre ui:field="timeout" class="java">
          <code>
            req.timeout(60_000); // set the timeout to 1 min
          </code>
        </pre>
      </div>
    </g:HTMLPanel>

    <!-- DELAY SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="delay">Delay</h1>
      <p class="lead">
        Set the time (in milliseconds) to delay request dispatching.
      </p>
      <h3><code>delay(int)</code></h3>
      <div class="highlight">
        <pre ui:field="delay" class="java">
          <code>
            req.delay(3_000); // delay the request for 3s
          </code>
        </pre>
      </div>
    </g:HTMLPanel>

    <!-- PAYLOAD SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="payload">Payload</h1>
      <p class="lead">
        Set the payload that will be serialized into the request body.
      </p>
      <p>
        Optionally, filter the fields that you want to be serialized.
      </p>
      <h3><code>payload(Object, String...)</code></h3>
      <div class="highlight">
        <pre ui:field="payload1" class="java">
          <code>/* Set a book object as the payload */
            <br/>req.payload(book);
            <br/>
            <br/>/* Ask to serialize only the author and title fields */
            <br/>req.payload(book, "author", "title");
          </code>
        </pre>
      </div>
      <p>
        Tip: You can skip serialization by setting a <code>SerializedPayload</code> object as the request payload.
      </p>
    </g:HTMLPanel>

    <!-- AUTH SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="auth">Auth</h1>
      <p class="lead">
        Set the authentication method.
      </p>
      <h3><code>auth(Auth | Auth.Provider)</code></h3>
      <div class="highlight">
        <pre ui:field="auth1" class="java">
          <code>/* Set a basic auth instance for this request */
            <br/>req.auth(new BasicAuth("usr", "pwd"));
            <br/>
            <br/>/* Set a digest auth provider for this request */
            <br/>req.auth(() -> new DigestAuth("usr", "pwd", "md5"));
          </code>
        </pre>
      </div>
    </g:HTMLPanel>

    <!-- RETRY SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="retry">retry</h1>
      <p class="lead">
        Set the retry policy by informing a sequence of delays (in milliseconds) to perform next calls and the events that will trigger a retry.
      </p>
      <h3><code>retry(int[], RequestEvent...)</code></h3>
      <p>
        The array of delays can be created with the <code>DelaySequence</code> factory methods.
      </p>
      <div class="highlight">
        <pre ui:field="retry" class="java">
          <code>/* Set the request to retry on 'timeout' or '429' responses */
            <br/>req.retry( DelaySequence.geometric(3, 2, 4), RequestEvent.TIMEOUT, Status.TOO_MANY_REQUESTS );
            <br/>
            <br/>/* Set the request to retry on 'cancel' or '429' and '503' responses */
            <br/>req.retry( DelaySequence.arithmetic(5, 20, 3), RequestEvent.CANCEL, Status.of(429), Status.of(503) );
            <br/>
            <br/>/* Set the request to retry on 'timeout', '4xx' and '529' */
            <br/>req.retry( DelaySequence.fixed(5, 15, 45), RequestEvent.TIMEOUT, StatusFamily.CLIENT_ERROR, Status.SERVICE_UNAVAILABLE );
          </code>
        </pre>
      </div>
      <p>
        Check <a href="https://github.com/reinert/requestor/#retry" target="_blank">GitHub README</a> for more details.
      </p>
    </g:HTMLPanel>

    <!-- POLL SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="poll">poll</h1>
      <p class="lead">
        Set the polling policy by informing a strategy, an interval (in milliseconds) and a limit.
      </p>
      <h3><code>poll(PollingStrategy, int, int)</code></h3>
      <p>
        It will enable request polling according to the policy. As a consequence, the request events may occur many times.
      </p>
      <div class="highlight">
        <pre ui:field="poll" class="java">
          <code>/* The next requests are dispatched 3s after the previous ones */
            <br/>req.poll( PollingStrategy.SHORT, 3_000 );
            <br/>
            <br/>/* The next requests are dispatched as soon the responses are received */
            <br/>req.poll( PollingStrategy.LONG); // Same as `req.poll( PollingStrategy.LONG, 0 )`
            <br/>
            <br/>/* The next requests are dispatched 10s after previous responses up to the limit of 5 requests */
            <br/>req.poll( PollingStrategy.LONG, 10_000, 5 );
          </code>
        </pre>
      </div>
      <p>
        Check <a href="https://github.com/reinert/requestor/#poll" target="_blank">GitHub README</a> for more details.
      </p>
    </g:HTMLPanel>

  </g:HTMLPanel>
</ui:UiBinder>