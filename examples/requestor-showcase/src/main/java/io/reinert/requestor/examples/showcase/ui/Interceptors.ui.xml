<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<!--
~ Copyright 2014-2021 Danilo Reinert
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~     http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
             xmlns:g='urn:import:com.google.gwt.user.client.ui'>
  <g:HTMLPanel>
    <!-- REQUEST INTERCEPTOR SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="request-interceptors">Request Interceptors</h1>
      <p class="lead">
        Request Interceptors allow the manipulation of the requests and their serialized payloads before they are sent.
      </p>

      <p>
        It is useful for appending security characters in serialized payloads, encode, compress, etc.
      </p>

      <p>
        Suppose we register the following <code>RequestInterceptor</code> in the <code>Session</code>, prepending some escape chars.
      </p>
      <div class="highlight">
        <pre ui:field="requestInterceptor" class="java">
          <code>session.register(new RequestInterceptor() {
            <br/>&#32;&#32;&#32;&#32;public void intercept(SerializedRequestInProcess request) {
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;final String rawPayload = request.getSerializedPayload().asString();
            <br/>
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/* create a new payload prepending &quot;)]}',\n&quot; to the serialized jsons */
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedPayload escapedPayload = new TextSerializedPayload(&quot;)]}',\\n&quot; + rawPayload);
            <br/>
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/* replace the request's payload by the new one */
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;request.setSerializedPayload(escapedPayload);
            <br/>
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/* set a header informing the server the body is escaped */
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;request.setHeader(&quot;Content-Escape&quot;, &quot;)]}',\\n&quot;);
            <br/>
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/* CALL PROCEED (otherwise the request hangs) */
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;request.proceed();
            <br/>&#32;&#32;&#32;&#32;}
            <br/>});
          </code>
        </pre>
      </div>

      <p>
        Now let's perform a request, and check if the payload was really transformed.
        <br/>
        The data property should contain the json with the appended chars at the beginning.
      </p>
      <div class="highlight">
        <pre ui:field="requestInterceptorReq" class="java">
          <code>session.req(&quot;https://httpbin.org/post&quot;)
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.payload(createJsonMsg(&quot;Session is awesome!&quot;))
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.post(String.class)
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.onSuccess(view::setRequestInterceptorText)
          </code>
        </pre>
      </div>

      <g:HTMLPanel styleName="action-panel">
        <g:HTMLPanel styleName="action">
          <g:Button ui:field="requestInterceptorButton" styleName="btn">POST</g:Button>
        </g:HTMLPanel>
        <textarea ui:field="requestInterceptorTextArea" class="form-control result" rows="10" readonly="readonly"/>
      </g:HTMLPanel>

      <p>
        The Request Interceptors are applied following the same order they are registered in the Session.
        <br/>
        They are executed after the requests are serialized, so they only manipulate serialized payloads,
        represented by the <code>SerializedPayload</code> object.
      </p>
    </g:HTMLPanel>


    <!-- RESPONSE INTERCEPTOR SECTION -->
    <g:HTMLPanel styleName="requestor-showcase-section">
      <h1 class="page-header" id="response-interceptors">Response Interceptors</h1>
      <p class="lead">
        Response Interceptors allow manipulation of serialized payloads right after receiving responses.
      </p>

      <p>
        It is useful for removing security characters in serialized payloads, decode, uncompress, etc.
      </p>

      <p>
        Suppose we register the following <code>ResponseInterceptor</code> in the <code>Session</code>, removing the first six escape chars.
      </p>
      <div class="highlight">
        <pre ui:field="responseInterceptor" class="java">
          <code>session.register(new ResponseInterceptor() {
            <br/>&#32;&#32;&#32;&#32;public void intercept(SerializedResponseInProcess response) {
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;final String rawPayload = response.getSerializedPayload().asString();
            <br/>
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/* create a new payload removing first 6 chars )]}',\n */
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedPayload unscapedPayload = new TextSerializedPayload(rawPayload.substring(6));
            <br/>
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/* replace the response's payload by the new one */
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;response.setSerializedPayload(unscapedPayload);
            <br/>
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/* CALL PROCEED (otherwise the request hangs) */
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;response.proceed();
            <br/>&#32;&#32;&#32;&#32;}
            <br/>});
          </code>
        </pre>
      </div>

      <p>
        Now let's perform a request, and check if the previous interceptor was really executed.
        <br/>
        The mocked endpoint <strong>https://www.mocky.io/v2/54a3ec74fd145c6c0195e912</strong> returns the raw response <code>)]}',\n{ "message": "Requestor is awesome! \o/" }</code>.
        The interceptor should remove the first six characters.
      </p>
      <div class="highlight">
        <pre ui:field="responseInterceptorReq" class="java">
          <code>session.get(&quot;https://www.mocky.io/v2/54a3ec74fd145c6c0195e912&quot;, String.class)
            <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.onSuccess(view::setResponseInterceptorText)
          </code>
        </pre>
      </div>

      <g:HTMLPanel styleName="action-panel">
        <div class="action">
          <g:Button ui:field="responseInterceptorButton" styleName="btn">GET</g:Button>
        </div>
        <textarea ui:field="responseInterceptorTextArea" class="form-control result" rows="2" readonly="readonly"/>
      </g:HTMLPanel>

      <p>
        Check in you browser's dev tools that the raw response body had the initial &quot;)]}',\n&quot; chars.
      </p>

      <p>
        The Response Interceptors are applied following the same order they are registered in the Session.
        <br/>
        They are executed before the filters and the deserialization.
      </p>
      <div class="requestor-callout requestor-callout-warning">
        <h4>Intercepting affects later response processing</h4>
        Since response intercept is the first processing step of the responses,
        it affects the subsequent deserialization and filtering.
        <br/>
        For example, if you change the response's content-type in a ResponseInterceptor,
        the serialization process, which is performed following, will consider it when deserializing the payload.
      </div>
    </g:HTMLPanel>

  </g:HTMLPanel>
</ui:UiBinder>