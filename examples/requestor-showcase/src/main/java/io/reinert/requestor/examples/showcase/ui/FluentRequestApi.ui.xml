<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<!--
~ Copyright 2014-2021 Danilo Reinert
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~     http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
             xmlns:g='urn:import:com.google.gwt.user.client.ui'>
  <g:HTMLPanel>
    <g:HTMLPanel>
      <h1 class="page-header" id="first-requests-api-introduction">Request easily</h1>
      <p class="lead">
        Requestor features a pleasant fluent requesting API that makes this task trivial.
      </p>

      <g:HTMLPanel styleName="requestor-showcase-innersection">
        <p>
          First, we need to call <code>session.req(&lt;uri&gt;)</code> to start building a Request.
          It returns a <code>RequestInvoker</code> with building and invoking capabilities.
        </p>

        <div class="highlight">
          <pre ui:field="callReq" class="java">
            <code>
              RequestInvoker reqInvoker = session.req(&quot;https://httpbin.org/post&quot;);
            </code>
          </pre>
        </div>

        <p>
          Since <code>RequestInvoker</code> inherits from <code>RequestBuilder</code>, we can set the request options.
        </p>
        <div class="highlight">
          <pre ui:field="buildRequest" class="java">
            <code>
              reqInvoker.timeout(30000) /* Set the request timeout in milliseconds (ms) */
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.delay(50) /* Set the request delay in ms (wait 50ms before sending the request) */
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.contentType(&quot;application/json&quot;) /* Set the Content-Type header */
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.accept(&quot;text/plain&quot;) /* Set the Accept header */
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.header(&quot;ETag&quot;, &quot;33a64df5&quot;) /* Set a custom header */
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.auth(new BasicAuth(&quot;username&quot;, &quot;password&quot;)) /* Set the authenticator */
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.payload(&quot;Hello world!&quot;); /* Set the payload to be serialized in the request body */
            </code>
          </pre>
        </div>

        <p>
          Besides setting the request options, <code>RequestInvoker</code> enables us to invoke the request by calling
          any of the HTTP Methods (get, post, put, patch, delete, head, options). Further, when invoking the request, we
          can inform the type we expect the response body to be deserialized and returned.
        </p>
        <div class="highlight">
          <pre ui:field="invokeRequest" class="java">
            <code>
              Request&lt;String&gt; request = reqInvoker.post(String.class);
            </code>
          </pre>
        </div>

        <p>
          After invoking the request, we receive a <code>Request&lt;T&gt;</code>. It is an observable that allows us to
          bind callbacks to specific request events.
        </p>
        <div class="highlight">
          <pre ui:field="bindCallbacks" class="java">
            <code>
              request.onSuccess(body -> view.setResponseText(body))
              <br/>
              &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.onFail(res -> view.setResponseText("Response was unsuccessful due to: " + res.getStatus()) )
              <br/>
              &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.onAbort(e -> view.setResponseText("Request was interrupted due to: " + e.getMessage()))
            </code>
          </pre>
        </div>

        <p>
          Putting it all together.
        </p>
        <div class="highlight">
          <pre ui:field="allTogether" class="java">
            <code>
              session.req(&quot;https://httpbin.org/post&quot;)
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.timeout(30000)
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.delay(50)
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.contentType(&quot;application/json&quot;)
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.accept(&quot;text/plain&quot;)
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.header(&quot;ETag&quot;, &quot;33a64df5&quot;)
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.auth(new BasicAuth(&quot;username&quot;, &quot;password&quot;))
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.payload(&quot;Hello world!&quot;)
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.post(String.class)
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.onSuccess(body -> view.setResponseText(body))
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.onFail(res -> view.setResponseText("Response was unsuccessful due to: " + res.getStatus()) )
              <br/>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.onAbort(e -> view.setResponseText("Request was interrupted due to: " + e.getMessage()))
            </code>
          </pre>
        </div>

        <g:HTMLPanel styleName="action-panel">
          <g:HTMLPanel styleName="action">
            <g:Button ui:field="requestButton" styleName="btn">POST</g:Button>
          </g:HTMLPanel>
          <textarea ui:field="responseTextArea" class="form-control result" rows="8" readonly="readonly"/>
        </g:HTMLPanel>
      </g:HTMLPanel>
    </g:HTMLPanel>

    <!--<g:HTMLPanel>-->
      <!--<h1 class="page-header" id="response-content">Response Content</h1>-->
      <!--<p class="lead">Easily retrieve the desired response.</p>-->
      <!--<p>-->
        <!--As shown before, it's possible to specify the expected type of the request result.-->
        <!--By doing this, you're telling Requestor to deserialize the response as the type you want. <br/>-->
        <!--When the response arrives, Requestor looks for a deserializer by matching both the content-type header of the response and the class you requested.-->
        <!--If no deserializer was found, then a null payload is returned as result, and an error is logged. Otherwise, the content is submitted to the deserializer for deserialization.-->
        <!--No exception is caught from the deserializer.-->
      <!--</p>-->
      <!--<p>-->
        <!--Requestor allows one to specify if she wants (1) no response content, (2) a single object or (3) a collection as the response content.-->
        <!--For each invoke method, there are three overloads-->
      <!--</p>-->
    <!--</g:HTMLPanel>-->
  </g:HTMLPanel>
</ui:UiBinder>